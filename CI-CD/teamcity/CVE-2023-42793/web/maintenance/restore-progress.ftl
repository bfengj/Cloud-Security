[#ftl]
[#-- @ftlvariable name="" type="jetbrains.buildServer.maintenance.StartupPageModel" --]

[#include 'maintenance-stuff.ftl']

[@maintenancePage title='Restoring ${serverName} Data from Backup' showStageStatus=false]
  <div>
    <p><label id="restore-progress">TeamCity Data restore is in progress.</label></p>
    <p><strong>maintainDB</strong> utility log:</p>
    <p>The log is located in ${ctx.getLogsDir() + "teamcity-maintenance.log"}.</p>
    <div class="clipboardButton">
      <button id="copyButton" class="btn clipboard-btn tc-icon_before icon16 tc-icon_copy" data-clipboard-action="copy" data-for="#restore-log">Copy to clipboard</button>
    </div>
  </div>
  <div class="restore-log" id="restore-log" onclick="stopScrollLog()">
  </div>
    <p>
      Note that a TeamCity backup file <strong>does not contain build artifacts</strong>.
      To keep all the the build logs and artifacts on the new server, you need to manually copy them from the old server
      (artifacts are located in <em>&ltTeamCity Data Directory></em><strong>/system/artifacts</strong> by default) to the new Data Directory.
    </p>

  <div class="action-block">
    <input type="button"
           id="returnToFisrtStart"
           class="btn btn_primary"
           onclick="return BS.Maintenance.postCommandAndRefresh('goToRestoreScreen')"
           value="Back to Restore settings" />
    <input type="button"
           id="cancel"
           class="btn"
           onclick="return BS.Maintenance.postCommandAndRefresh('doCancelRestore');"
           value="Cancel"/>
    <input type="button"
           id="proceedAfterRestore"
           class="btn btn_primary"
           onclick="return BS.Maintenance.postCommandAndRefresh('proccedAfterRestore')"
           value="Proceed"
           disabled="disabled" />
  </div>
  <script type="application/javascript">
    (function() {
      var cb = BS.Clipboard('#copyButton', {
        text: function(trigger) {
          return document.querySelector(trigger.getAttribute('data-for')).innerHTML
          .replace(/&nbsp;/ig, ' ')
          .replace(/<br>/ig, '')
          .replace(/&lt;/ig, '<')
          .replace(/<pre>/ig, '')
          .replace(/<\/pre>/ig, '\n');
        },
        skipDefaultHandlers: true
      });
    })();
    var messageCount = 0;
    var interval = 1000;
    var timeout;
    var scheduleNextStep = true;
    var scrollLog = true;

    $(document).ready(function() {
      $('#auto-refresh-note').addClass('hidden');
      $('#returnToFisrtStart').addClass('hidden');
      $('#returnToFisrtStart').addClass('hidden');
      doAjax();
    });

    function doAjax() {
          $.ajax({
            type: 'GET',
            url: '${webPrefix}/mnt/get/restoreProcessInfo?startIndex=' + messageCount,
            data: $(this).serialize(),
            dataType: 'json',
            success: function (data) {
              for(var i = 0; i < data.length; i++) {
                var str = data[i];
                switch (str.valueOf()) {
                  case "MARK_FINISHED".valueOf() : {
                    restoreFinishedWithMessage("TeamCity Data restore completed successfully.")
                    break;
                  }
                  case "MARK_FAILED".valueOf() : {
                    restoreFailedWithMessage("TeamCity Data restore failed.")
                    break;
                  }
                  case "MARK_CANCELED".valueOf() : {
                    restoreFailedWithMessage("TeamCity Data restore was canceled.");
                    break;
                  }
                  default : {
                    $('#restore-log').append("<pre>" + str + "</pre>");
                    if (scrollLog) {
                      $("#restore-log").scrollTop($("#restore-log")[0].scrollHeight);
                    }
                  };
                  messageCount = messageCount + 1;
                }
              }
            },
            complete: function (data) {
              if (scheduleNextStep)
                timeout = setTimeout(doAjax, interval);
            }
          });
    }

    function stopScrollLog() {
      scrollLog = false;
    }

    function restoreFailedWithMessage(message) {
      stopReadingLog();
      $('#proceedAfterRestore').addClass('hidden');
      $('#returnToFisrtStart').removeClass("hidden");
      $('#restore-progress')[0].innerText = message;
      $('#cancel').addClass('hidden');
    }

    function restoreFinishedWithMessage(message) {
      stopReadingLog();
      $('#proceedAfterRestore').removeAttr('disabled');
      $('#restore-progress')[0].innerText = message;
      $('#cancel').attr('disabled', 'disabled');
    }

    function stopReadingLog() {
      scheduleNextStep = false;
      clearTimeout(timeout);
    }

  </script>

  <style type="text/css">
    .btn {
      margin-right: 1ex;
    }

    pre {
        white-space: pre-wrap;
    }

    div.restore-log {
        max-height: 300px;
        overflow-y: scroll;
        padding: 16px;
        background-color: var(--ring-code-background-color);
    }

  </style>

[/@maintenancePage]
